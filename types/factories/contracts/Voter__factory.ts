/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { Contract, Signer, utils } from "ethers";
import type { Provider } from "@ethersproject/providers";
import type { Voter, VoterInterface } from "../../contracts/Voter";

const _abi = [
  "constructor(address,address,address,address)",
  "event Abstained(uint256,uint256)",
  "event Attach(address indexed,address indexed,uint256)",
  "event Deposit(address indexed,address indexed,uint256,uint256)",
  "event Detach(address indexed,address indexed,uint256)",
  "event DistributeReward(address indexed,address indexed,uint256)",
  "event GaugeCreated(address indexed,address,address,address indexed,address indexed)",
  "event GaugeKilled(address indexed)",
  "event GaugeRevived(address indexed)",
  "event NotifyReward(address indexed,address indexed,uint256)",
  "event Voted(address indexed,uint256,uint256)",
  "event Whitelisted(address indexed,address indexed)",
  "event Withdraw(address indexed,address indexed,uint256,uint256)",
  "function _ve() view returns (address)",
  "function attachTokenToGauge(uint256,address)",
  "function bribefactory() view returns (address)",
  "function claimBribes(address[],address[][],uint256)",
  "function claimFees(address[],address[][],uint256)",
  "function claimRewards(address[],address[][])",
  "function claimable(address) view returns (uint256)",
  "function createGauge(address) returns (address)",
  "function detachTokenFromGauge(uint256,address)",
  "function distribute(address[])",
  "function distribute(address)",
  "function distribute(uint256,uint256)",
  "function distribute()",
  "function distributeFees(address[])",
  "function distro()",
  "function emergencyCouncil() view returns (address)",
  "function emitDeposit(uint256,address,uint256)",
  "function emitWithdraw(uint256,address,uint256)",
  "function external_bribes(address) view returns (address)",
  "function factory() view returns (address)",
  "function gaugefactory() view returns (address)",
  "function gauges(address) view returns (address)",
  "function governor() view returns (address)",
  "function initialize(address[],address)",
  "function internal_bribes(address) view returns (address)",
  "function isAlive(address) view returns (bool)",
  "function isGauge(address) view returns (bool)",
  "function isWhitelisted(address) view returns (bool)",
  "function killGauge(address)",
  "function lastVoted(uint256) view returns (uint256)",
  "function length() view returns (uint256)",
  "function minter() view returns (address)",
  "function notifyRewardAmount(uint256)",
  "function poke(uint256)",
  "function poolForGauge(address) view returns (address)",
  "function poolVote(uint256,uint256) view returns (address)",
  "function pools(uint256) view returns (address)",
  "function reset(uint256)",
  "function reviveGauge(address)",
  "function setEmergencyCouncil(address)",
  "function setGovernor(address)",
  "function totalWeight() view returns (uint256)",
  "function updateAll()",
  "function updateFor(address[])",
  "function updateForRange(uint256,uint256)",
  "function updateGauge(address)",
  "function usedWeights(uint256) view returns (uint256)",
  "function vote(uint256,address[],uint256[])",
  "function votes(uint256,address) view returns (uint256)",
  "function weights(address) view returns (uint256)",
  "function whitelist(address)",
] as const;

export class Voter__factory {
  static readonly abi = _abi;
  static createInterface(): VoterInterface {
    return new utils.Interface(_abi) as VoterInterface;
  }
  static connect(address: string, signerOrProvider: Signer | Provider): Voter {
    return new Contract(address, _abi, signerOrProvider) as Voter;
  }
}
