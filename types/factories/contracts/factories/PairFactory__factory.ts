/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { Contract, Signer, utils } from "ethers";
import type { Provider } from "@ethersproject/providers";
import type {
  PairFactory,
  PairFactoryInterface,
} from "../../../contracts/factories/PairFactory";

const _abi = [
  "constructor()",
  "event PairCreated(address indexed,address indexed,bool,address,uint256)",
  "function MAX_FEE() view returns (uint256)",
  "function acceptFeeManager()",
  "function acceptPauser()",
  "function allPairs(uint256) view returns (address)",
  "function allPairsLength() view returns (uint256)",
  "function createPair(address,address,bool) returns (address)",
  "function feeManager() view returns (address)",
  "function getFee(bool) view returns (uint256)",
  "function getInitializable() view returns (address, address, bool)",
  "function getPair(address,address,bool) view returns (address)",
  "function isPair(address) view returns (bool)",
  "function isPaused() view returns (bool)",
  "function pairCodeHash() pure returns (bytes32)",
  "function pauser() view returns (address)",
  "function pendingFeeManager() view returns (address)",
  "function pendingPauser() view returns (address)",
  "function setFee(bool,uint256)",
  "function setFeeManager(address)",
  "function setPause(bool)",
  "function setPauser(address)",
  "function stableFee() view returns (uint256)",
  "function volatileFee() view returns (uint256)",
] as const;

export class PairFactory__factory {
  static readonly abi = _abi;
  static createInterface(): PairFactoryInterface {
    return new utils.Interface(_abi) as PairFactoryInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): PairFactory {
    return new Contract(address, _abi, signerOrProvider) as PairFactory;
  }
}
