/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { Contract, Signer, utils } from "ethers";
import type { Provider } from "@ethersproject/providers";
import type {
  BribeFactory,
  BribeFactoryInterface,
} from "../../../contracts/factories/BribeFactory";

const _abi = [
  {
    inputs: [
      {
        internalType: "address[]",
        name: "allowedRewards",
        type: "address[]",
      },
    ],
    name: "createExternalBribe",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address[]",
        name: "allowedRewards",
        type: "address[]",
      },
    ],
    name: "createInternalBribe",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "last_external_bribe",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "last_internal_bribe",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
] as const;

export class BribeFactory__factory {
  static readonly abi = _abi;
  static createInterface(): BribeFactoryInterface {
    return new utils.Interface(_abi) as BribeFactoryInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): BribeFactory {
    return new Contract(address, _abi, signerOrProvider) as BribeFactory;
  }
}
