/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { Contract, Signer, utils } from "ethers";
import type { Provider } from "@ethersproject/providers";
import type { Gauge, GaugeInterface } from "../../contracts/Gauge";

const _abi = [
  "constructor(address,address,address,address,address,bool,address[])",
  "event ClaimFees(address indexed,uint256,uint256)",
  "event ClaimRewards(address indexed,address indexed,uint256)",
  "event Deposit(address indexed,uint256,uint256)",
  "event NotifyReward(address indexed,address indexed,uint256)",
  "event Withdraw(address indexed,uint256,uint256)",
  "function _ve() view returns (address)",
  "function balanceOf(address) view returns (uint256)",
  "function batchRewardPerToken(address,uint256)",
  "function batchUpdateRewardPerToken(address,uint256)",
  "function checkpoints(address,uint256) view returns (uint256, uint256)",
  "function claimFees() returns (uint256, uint256)",
  "function deposit(uint256,uint256)",
  "function depositAll(uint256)",
  "function derivedBalance(address) view returns (uint256)",
  "function derivedBalances(address) view returns (uint256)",
  "function derivedSupply() view returns (uint256)",
  "function earned(address,address) view returns (uint256)",
  "function external_bribe() view returns (address)",
  "function fees0() view returns (uint256)",
  "function fees1() view returns (uint256)",
  "function getPriorBalanceIndex(address,uint256) view returns (uint256)",
  "function getPriorRewardPerToken(address,uint256) view returns (uint256, uint256)",
  "function getPriorSupplyIndex(uint256) view returns (uint256)",
  "function getReward(address,address[])",
  "function internal_bribe() view returns (address)",
  "function isForPair() view returns (bool)",
  "function isReward(address) view returns (bool)",
  "function lastEarn(address,address) view returns (uint256)",
  "function lastTimeRewardApplicable(address) view returns (uint256)",
  "function lastUpdateTime(address) view returns (uint256)",
  "function left(address) view returns (uint256)",
  "function notifyRewardAmount(address,uint256)",
  "function numCheckpoints(address) view returns (uint256)",
  "function periodFinish(address) view returns (uint256)",
  "function rewardPerToken(address) view returns (uint256)",
  "function rewardPerTokenCheckpoints(address,uint256) view returns (uint256, uint256)",
  "function rewardPerTokenNumCheckpoints(address) view returns (uint256)",
  "function rewardPerTokenStored(address) view returns (uint256)",
  "function rewardRate(address) view returns (uint256)",
  "function rewards(uint256) view returns (address)",
  "function rewardsListLength() view returns (uint256)",
  "function stake() view returns (address)",
  "function supplyCheckpoints(uint256) view returns (uint256, uint256)",
  "function supplyNumCheckpoints() view returns (uint256)",
  "function swapOutRewardToken(uint256,address,address)",
  "function tokenIds(address) view returns (uint256)",
  "function totalSupply() view returns (uint256)",
  "function userRewardPerTokenStored(address,address) view returns (uint256)",
  "function voter() view returns (address)",
  "function withdraw(uint256)",
  "function withdrawAll()",
  "function withdrawToken(uint256,uint256)",
] as const;

export class Gauge__factory {
  static readonly abi = _abi;
  static createInterface(): GaugeInterface {
    return new utils.Interface(_abi) as GaugeInterface;
  }
  static connect(address: string, signerOrProvider: Signer | Provider): Gauge {
    return new Contract(address, _abi, signerOrProvider) as Gauge;
  }
}
